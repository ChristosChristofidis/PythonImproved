# [PackageDev] target_format: plist, ext: tmLanguage
comment: Matches Python's regular expression syntax.
name: Regular Expressions (PythonImproved)
scopeName: source.regex.python
fileTypes: [re]
uuid: DD867ABF-1EC6-415D-B047-687F550A1D51

patterns:
- name: keyword.control.anchor.regex
  match: \\[bBAZzG]|\^|\$

- name: keyword.other.back-reference.regex
  match: \\[1-9][0-9]?

- name: keyword.operator.quantifier.regex
  match: '[?+*][?+]?|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??'

- name: keyword.operator.or.regex
  match: \|

- name: comment.block.regex
  begin: \(\?\#
  end: \)

- comment: We are restrictive in what we allow to go after the comment character to
    avoid false positives, since the availability of comments depend on regex flags.
  name: comment.line.number-sign.regex
  match: (?<=^|\s)#\s[[a-zA-Z0-9,. \t?!-:][^\x{00}-\x{7F}]]*$

- name: keyword.other.option-toggle.regex
  match: \(\?[iLmsux]+\)

- name: keyword.other.back-reference.named.regex
  match: (\()(\?P=([a-zA-Z_][a-zA-Z_0-9]*\w*))(\))

- name: meta.group.assertion.regex
  begin: (\()((\?=)|(\?!)|(\?<=)|(\?<!))
  beginCaptures:
    '1': {name: punctuation.definition.group.regex}
    '2': {name: punctuation.definition.group.assertion.regex}
    '3': {name: meta.assertion.look-ahead.regex}
    '4': {name: meta.assertion.negative-look-ahead.regex}
    '5': {name: meta.assertion.look-behind.regex}
    '6': {name: meta.assertion.negative-look-behind.regex}
  end: (\))
  endCaptures:
    '1': {name: punctuation.definition.group.regex}
  patterns:
  - include: $self

- comment: we can make this more sophisticated to match the | character that separates
    yes-pattern from no-pattern, but it's not really necessary.
  name: meta.group.assertion.conditional.regex
  begin: (\()(\?\(([1-9][0-9]?|[a-zA-Z_][a-zA-Z_0-9]*)\))
  beginCaptures:
    '1': {name: punctuation.definition.group.regex}
    '2': {name: punctuation.definition.group.assertion.conditional.regex}
    '3': {name: entity.name.section.back-reference.regex}
  end: (\))
  patterns:
  - include: $self

- name: meta.group.regex
  begin: (\()((\?P<)([A-Za-z]\w*)(>)|(\?:))?
  beginCaptures:
    '1': {name: punctuation.definition.group.regex}
    '3': {name: punctuation.definition.group.capture.regex}
    '4': {name: entity.name.section.group.regex}
    '5': {name: punctuation.definition.group.capture.regex}
    '6': {name: punctuation.definition.group.no-capture.regex}
  end: (\))
  endCaptures:
    '1': {name: punctuation.definition.group.regex}
  patterns:
  - include: $self

- include: '#character-class'

repository:
  character-class:
    patterns:
    - match: |-
        (?x)\\
        (
          (w) |
          (W) |
          (s) |
          (S) |
          (d) |
          (D)
        )
      captures:
        '2': {name: constant.character.character-class.word.regex}
        '3': {name: constant.character.character-class.non-word.regex}
        '4': {name: constant.character.character-class.whitespace.regex}
        '5': {name: constant.character.character-class.non-whitespace.regex}
        '6': {name: constant.character.character-class.digit.regex}
        '7': {name: constant.character.character-class.non-digit.regex}
    - name: constant.character.escape.backslash.regex
      match: \\.
    - name: constant.other.character-class.set.regex
      begin: (\[)(\^)?
      beginCaptures:
        '1': {name: punctuation.definition.character-class.regex}
        '2': {name: keyword.operator.negation.regex}
      end: (\])
      endCaptures:
        '1': {name: punctuation.definition.character-class.regex}
      patterns:
      - include: '#character-class'
      - name: constant.other.character-class.range.regex
        match: ((\\.)|.)\-((\\.)|[^\]])
        captures:
          '2': {name: constant.character.escape.backslash.regex}
          '4': {name: constant.character.escape.backslash.regex}
foldingStartMarker: (/\*|\{|\()
foldingStopMarker: (\*/|\}|\))
