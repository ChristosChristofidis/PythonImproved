<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Matches Python's regular expression syntax.</string>
	<key>fileTypes</key>
	<array>
		<string>re</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(/\*|\{|\()</string>
	<key>foldingStopMarker</key>
	<string>(\*/|\}|\))</string>
	<key>name</key>
	<string>Regular Expressions (PythonImproved)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>\\[bBAZzG]|\^|\$</string>
			<key>name</key>
			<string>keyword.control.anchor.regex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\\[1-9][0-9]?</string>
			<key>name</key>
			<string>keyword.other.back-reference.regex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[?+*][?+]?|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
			<key>name</key>
			<string>keyword.operator.quantifier.regex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\|</string>
			<key>name</key>
			<string>keyword.operator.or.regex</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(\?\#</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>comment.block.regex</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regex flags.</string>
			<key>match</key>
			<string>(?&lt;=^|\s)#\s[[a-zA-Z0-9,. \t?!-:][^\x{00}-\x{7F}]]*$</string>
			<key>name</key>
			<string>comment.line.number-sign.regex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(\?[iLmsux]+\)</string>
			<key>name</key>
			<string>keyword.other.option-toggle.regex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\()(\?P=([a-zA-Z_][a-zA-Z_0-9]*\w*))(\))</string>
			<key>name</key>
			<string>keyword.other.back-reference.named.regex</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\()((\?=)|(\?!)|(\?&lt;=)|(\?&lt;!))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.assertion.regex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.look-ahead.regex</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.negative-look-ahead.regex</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.look-behind.regex</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>meta.assertion.negative-look-behind.regex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regex</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.group.assertion.regex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\()(\?\(([1-9][0-9]?|[a-zA-Z_][a-zA-Z_0-9]*)\))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.assertion.conditional.regex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.section.back-reference.regex</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>we can make this more sophisticated to match the | character that separates yes-pattern from no-pattern, but it's not really necessary.</string>
			<key>end</key>
			<string>(\))</string>
			<key>name</key>
			<string>meta.group.assertion.conditional.regex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\()((\?P&lt;)([A-Za-z]\w*)(&gt;)|(\?:))?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regex</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.capture.regex</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.section.group.regex</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.capture.regex</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.no-capture.regex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.group.regex</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.group.regex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#character-class</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.character-class.word.regex</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.character.character-class.non-word.regex</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.character.character-class.whitespace.regex</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>constant.character.character-class.non-whitespace.regex</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>constant.character.character-class.digit.regex</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>constant.character.character-class.non-digit.regex</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)\\
(
  (w) |
  (W) |
  (s) |
  (S) |
  (d) |
  (D)
)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regex</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regex</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#character-class</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regex</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regex</string>
								</dict>
							</dict>
							<key>match</key>
							<string>((\\.)|.)\-((\\.)|[^\]])</string>
							<key>name</key>
							<string>constant.other.character-class.range.regex</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.regex.python</string>
	<key>uuid</key>
	<string>DD867ABF-1EC6-415D-B047-687F550A1D51</string>
</dict>
</plist>
